@using Chinook.Services;
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims;
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            @*<NavLink class="nav-link" href="playlist/1">
                <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>My favorite tracks
            </NavLink>*@
             @foreach (var playlist in Playlists)
            {
                var lnk = string.Format("playlist/{0}", playlist.PlaylistId.ToString());
                <NavLink class="nav-link" href="@lnk">
                    <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>@playlist.Name<a href="#" class="m-1" title="Remove this playlist" @onclick="@(() => RemovePlaylist(playlist.PlaylistId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                </NavLink>
               
            }
        </div>

    </nav>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    private List<ClientModels.Playlist> Playlists;
    private DbContext DbContext;
    [Inject] IPlaylistService playlistService { get; set; }
    private string CurrentUserId;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        var DbContext = await DbFactory.CreateDbContextAsync();

        Playlists = DbContext.UserPlaylists.Where(u => u.UserId == CurrentUserId)
                        .Include(p => p.Playlist).ThenInclude(t => t.Tracks)
                        .Select(x => new ClientModels.Playlist()
                            {
                                PlaylistId = x.PlaylistId,
                                Name = x.Playlist.Name,                                
                            }).ToList();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task<string> GetLink(long id)
    {
        return string.Format("playlist/{0}", id.ToString());
    }

    private void RemovePlaylist(long playlistId)
    {
        playlistService.RemovePlaylist(CurrentUserId, playlistId);

        //CloseInfoMessage();

    }
}
