@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] IPlaylistService playlistService { get; set; }
    [Inject] IArtistService artistService { get; set; }
    [Inject] ITrackService trackService { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist? Artist;
    private List<PlaylistTrack> Tracks;    
    private List<ClientModels.Playlist> Playlists;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private long MaxPlaylistId;
    private string SelectedPlaylist;
    private string NewPlaylistValue;
    private bool NewPlaylistDisabled;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        var DbContext = await DbFactory.CreateDbContextAsync();

        Artist = await artistService.GetArtists(ArtistId); 
        Tracks = await trackService.GetTracks(CurrentUserId, ArtistId);
        Playlists = await playlistService.GetUserPlayLists(CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        var userPlaylist = await playlistService.CreatePlaylist(CurrentUserId, "My favorite tracks");

        if (userPlaylist is not null)
        {
            playlistService.AddTrackToPlaylist(trackId, userPlaylist.PlaylistId);
        }        

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist My favorite tracks.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);        
        var UserPlaylist = await playlistService.GetUserPlayListByName(CurrentUserId, "My favorite tracks");

        if (UserPlaylist is not null)
        {
            playlistService.RemoveTrackFromPlaylist(trackId, UserPlaylist.PlaylistId);
        }

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist My favorite tracks.";
    }

    private async void AddTrackToPlaylist()
    {
        CloseInfoMessage();

        if ((string.IsNullOrEmpty(SelectedPlaylist) || SelectedPlaylist == "-1") && !string.IsNullOrEmpty(NewPlaylistValue))
        {
            var userPlaylist = await playlistService.CreatePlaylist(CurrentUserId, NewPlaylistValue);

            if (userPlaylist is not null)
            {
                playlistService.AddTrackToPlaylist(SelectedTrack.TrackId, userPlaylist.PlaylistId);
            }
        }
        else
        {
            playlistService.AddTrackToPlaylist(SelectedTrack.TrackId, long.Parse(SelectedPlaylist));    
        }

        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();
    }    

    private void SelectPlaylistValue(ChangeEventArgs e)
    {
        SelectedPlaylist = e.Value.ToString();
        NewPlaylistDisabled = SelectedPlaylist == "-1" ? false : true;
    }
    private void SelectNewPlaylistValue(ChangeEventArgs e)
    {
        NewPlaylistValue = e.Value.ToString();
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }


}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="@SelectPlaylistValue">
                <option value="-1">Select playlist</option>
                @foreach (var Playlist in Playlists)
                {
                    <option value="@Playlist.PlaylistId">@Playlist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" disabled="@NewPlaylistDisabled" @onchange="@SelectNewPlaylistValue" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

